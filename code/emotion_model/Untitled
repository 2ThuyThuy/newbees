{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31750,"status":"ok","timestamp":1705399936751,"user":{"displayName":"Hoàng Nguyễn Việt","userId":"17495966322171894693"},"user_tz":-420},"id":"SHeNPHouuNOT","outputId":"e0bb5b06-c6af-454c-9165-0994e2633e6f"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import plotly.express as px\n","\n","\n","import tensorflow as tf\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.utils import to_categorical\n","\n","from sklearn.metrics import confusion_matrix , classification_report\n","from sklearn.preprocessing import LabelBinarizer\n","from sklearn.metrics import roc_curve, auc, roc_auc_score\n","\n","from IPython.display import clear_output\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","import os\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":1606,"status":"ok","timestamp":1705399938344,"user":{"displayName":"Hoàng Nguyễn Việt","userId":"17495966322171894693"},"user_tz":-420},"id":"Ew8vXmoqujgn"},"outputs":[],"source":["train_labels = pd.read_csv('/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/labels_train.csv')\n","train_labels['bbox'] = train_labels['bbox'].str.strip('[')\n","train_labels['bbox'] = train_labels['bbox'].str.strip(']')\n","train_labels[['x','y','w','h']] = train_labels['bbox'].str.split(',', expand=True).astype(float).astype(int)"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":344,"status":"ok","timestamp":1705399960592,"user":{"displayName":"Hoàng Nguyễn Việt","userId":"17495966322171894693"},"user_tz":-420},"id":"l0EzSKzQuOFS"},"outputs":[],"source":["train_dir = '/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/emotion_data/external_data/train/'\n"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":371,"status":"ok","timestamp":1705400636365,"user":{"displayName":"Hoàng Nguyễn Việt","userId":"17495966322171894693"},"user_tz":-420},"id":"n_YxqFt3uP1e"},"outputs":[],"source":["SEED = 12\n","IMG_HEIGHT = 48\n","IMG_WIDTH = 48\n","BATCH_SIZE = 64\n","EPOCHS = 5\n","FINE_TUNING_EPOCHS = 20\n","LR = 0.01\n","NUM_CLASSES = 7\n","EARLY_STOPPING_CRITERIA=3\n","CLASS_LABELS  = ['Anger', 'Disgust', 'Fear', 'Happy', 'Neutral', 'Sadness', \"Surprise\"]"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":514,"status":"ok","timestamp":1705400639702,"user":{"displayName":"Hoàng Nguyễn Việt","userId":"17495966322171894693"},"user_tz":-420},"id":"18J34uQTuQ02","outputId":"93255e93-46bb-4cfb-ff53-2a2fcbcaa56c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Found 16064 images belonging to 7 classes.\n"]}],"source":["preprocess_fun = tf.keras.applications.densenet.preprocess_input\n","\n","train_datagen = ImageDataGenerator(horizontal_flip=True,\n","                                   width_shift_range=0.1,\n","                                   height_shift_range=0.05,\n","                                   rescale = 1./255,\n","                                   preprocessing_function=preprocess_fun\n","                                  )\n","train_generator = train_datagen.flow_from_directory(directory = train_dir,\n","                                                    target_size = (IMG_HEIGHT ,IMG_WIDTH),\n","                                                    batch_size = BATCH_SIZE,\n","                                                    shuffle  = True ,\n","                                                    color_mode = \"rgb\",\n","                                                    class_mode = \"categorical\",\n","                                                    subset = \"training\",\n","                                                    seed = 12\n","                                                   )"]},{"cell_type":"code","execution_count":13,"metadata":{"executionInfo":{"elapsed":11,"status":"ok","timestamp":1705400640508,"user":{"displayName":"Hoàng Nguyễn Việt","userId":"17495966322171894693"},"user_tz":-420},"id":"2Pdy_lvVuSYW"},"outputs":[],"source":["def feature_extractor(inputs):\n","    feature_extractor = tf.keras.applications.DenseNet169(input_shape=(IMG_HEIGHT,IMG_WIDTH, 3),\n","                                               include_top=False,\n","                                               weights=\"imagenet\")(inputs)\n","\n","    return feature_extractor\n","\n","def classifier(inputs):\n","    x = tf.keras.layers.GlobalAveragePooling2D()(inputs)\n","    x = tf.keras.layers.Dense(256, activation=\"relu\", kernel_regularizer = tf.keras.regularizers.l2(0.01))(x)\n","    x = tf.keras.layers.Dropout(0.3)(x)\n","    x = tf.keras.layers.Dense(1024, activation=\"relu\", kernel_regularizer = tf.keras.regularizers.l2(0.01))(x)\n","    x = tf.keras.layers.Dropout(0.5)(x)\n","    x = tf.keras.layers.Dense(512, activation=\"relu\", kernel_regularizer = tf.keras.regularizers.l2(0.01))(x)\n","    x = tf.keras.layers.Dropout(0.5) (x)\n","    x = tf.keras.layers.Dense(NUM_CLASSES, activation=\"softmax\", name=\"classification\")(x)\n","\n","    return x\n","\n","def final_model(inputs):\n","    densenet_feature_extractor = feature_extractor(inputs)\n","    classification_output = classifier(densenet_feature_extractor)\n","\n","    return classification_output\n","\n","def define_compile_model():\n","\n","    inputs = tf.keras.layers.Input(shape=(IMG_HEIGHT ,IMG_WIDTH,3))\n","    classification_output = final_model(inputs)\n","    model = tf.keras.Model(inputs=inputs, outputs = classification_output)\n","\n","    model.compile(optimizer=tf.keras.optimizers.SGD(0.1),\n","                loss='categorical_crossentropy',\n","                metrics = ['accuracy'])\n","    checkpoint_filepath = '/content/drive/MyDrive/AI_HACKATHON_NEWBEES/code/emotion_model'\n","    model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint( filepath=checkpoint_filepath,\n","                                                                    save_weights_only=True,\n","                                                                    monitor='val_accuracy',\n","                                                                    mode='max',\n","                                                                    save_best_only=True)\n","\n","    return model"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8739,"status":"ok","timestamp":1705400651429,"user":{"displayName":"Hoàng Nguyễn Việt","userId":"17495966322171894693"},"user_tz":-420},"id":"8axbgYHKuUHY","outputId":"ca2b230d-4663-4c3d-c7d1-0da69f706c63"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"model_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_3 (InputLayer)        [(None, 48, 48, 3)]       0         \n","                                                                 \n"," densenet169 (Functional)    (None, 1, 1, 1664)        12642880  \n","                                                                 \n"," global_average_pooling2d_1  (None, 1664)              0         \n","  (GlobalAveragePooling2D)                                       \n","                                                                 \n"," dense_3 (Dense)             (None, 256)               426240    \n","                                                                 \n"," dropout_3 (Dropout)         (None, 256)               0         \n","                                                                 \n"," dense_4 (Dense)             (None, 1024)              263168    \n","                                                                 \n"," dropout_4 (Dropout)         (None, 1024)              0         \n","                                                                 \n"," dense_5 (Dense)             (None, 512)               524800    \n","                                                                 \n"," dropout_5 (Dropout)         (None, 512)               0         \n","                                                                 \n"," classification (Dense)      (None, 7)                 3591      \n","                                                                 \n","=================================================================\n","Total params: 13860679 (52.87 MB)\n","Trainable params: 1217799 (4.65 MB)\n","Non-trainable params: 12642880 (48.23 MB)\n","_________________________________________________________________\n"]}],"source":["model = define_compile_model()\n","clear_output()\n","\n","# Feezing the feature extraction layers\n","model.layers[1].trainable = False\n","\n","model.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"gQioGE74uaOb"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/5\n","251/251 [==============================] - ETA: 0s - loss: 10.9596 - accuracy: 0.4591 "]},{"name":"stderr","output_type":"stream","text":["WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n"]},{"name":"stdout","output_type":"stream","text":["251/251 [==============================] - 2616s 10s/step - loss: 10.9596 - accuracy: 0.4591\n","Epoch 2/5\n","251/251 [==============================] - ETA: 0s - loss: 4.5221 - accuracy: 0.6122"]},{"name":"stderr","output_type":"stream","text":["WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n"]},{"name":"stdout","output_type":"stream","text":["251/251 [==============================] - 669s 3s/step - loss: 4.5221 - accuracy: 0.6122\n","Epoch 3/5\n","251/251 [==============================] - ETA: 0s - loss: 2.1544 - accuracy: 0.6899"]},{"name":"stderr","output_type":"stream","text":["WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n"]},{"name":"stdout","output_type":"stream","text":["251/251 [==============================] - 671s 3s/step - loss: 2.1544 - accuracy: 0.6899\n","Epoch 4/5\n","251/251 [==============================] - ETA: 0s - loss: 1.2685 - accuracy: 0.7208"]},{"name":"stderr","output_type":"stream","text":["WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n"]},{"name":"stdout","output_type":"stream","text":["251/251 [==============================] - 675s 3s/step - loss: 1.2685 - accuracy: 0.7208\n","Epoch 5/5\n","251/251 [==============================] - ETA: 0s - loss: 0.9229 - accuracy: 0.7408"]},{"name":"stderr","output_type":"stream","text":["WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n"]},{"name":"stdout","output_type":"stream","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r251/251 [==============================] - 672s 3s/step - loss: 0.9229 - accuracy: 0.7408\n"]}],"source":["earlyStoppingCallback = tf.keras.callbacks.EarlyStopping(monitor='val_loss',\n","                                                         patience=EARLY_STOPPING_CRITERIA,\n","                                                         verbose= 1 ,\n","                                                         restore_best_weights=True\n","                                                        )\n","\n","history = model.fit(x = train_generator,\n","                    epochs = EPOCHS ,\n","                    callbacks= [earlyStoppingCallback])\n","\n","history = pd.DataFrame(history.history)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ByaXce0sxluT"},"outputs":[],"source":[]}],"metadata":{"colab":{"name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}
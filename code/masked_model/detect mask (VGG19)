{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"9rdXuLO4cSrt"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import cv2\n","import os\n","import torch\n","from glob import glob\n","import shutil\n","#from retinaface import RetinaFace\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":632,"status":"ok","timestamp":1705398400619,"user":{"displayName":"Thịnh Vũ Đức","userId":"10883447843124679803"},"user_tz":-420},"id":"F5Uppz1AO_0r","outputId":"e5ec2b83-1134-4b2c-891c-f163d0c813ef"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing collected packages: retina-face\n","Successfully installed retina-face-0.0.13\n"]}],"source":["!pip install retina-face"]},{"cell_type":"markdown","metadata":{"id":"19huEXfKDyPg"},"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"ZvFLBhHGAWPz","outputId":"d68037a0-2ff0-463b-ddea-b41e64ffc768"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0N13usE8fAa7","executionInfo":{"status":"error","timestamp":1705399213352,"user_tz":-420,"elapsed":11,"user":{"displayName":"Hoàng Nguyễn Việt","userId":"17495966322171894693"}},"outputId":"86714321-c14b-4521-83ce-42f559253162","colab":{"base_uri":"https://localhost:8080/","height":373}},"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: '/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/labels_train.csv'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-1df215a30f66>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrain_labels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/labels_train.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mtrain_labels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'bbox'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_labels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'bbox'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'['\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtrain_labels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'bbox'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_labels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'bbox'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m']'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mtrain_labels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'x'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'y'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'w'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'h'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_labels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'bbox'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m','\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexpand\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    209\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m                     \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnew_arg_name\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_arg_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 211\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    212\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    329\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfind_stack_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m                 )\n\u001b[0;32m--> 331\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    332\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m         \u001b[0;31m# error: \"Callable[[VarArg(Any), KwArg(Any)], Any]\" has no\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    948\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    949\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 950\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    951\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    952\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    603\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    604\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 605\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1440\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1441\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1442\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1443\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1444\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1733\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1734\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1735\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1736\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1737\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    854\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    855\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 856\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    857\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    858\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/labels_train.csv'"]}],"source":["train_labels = pd.read_csv('/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/labels_train.csv')\n","train_labels['bbox'] = train_labels['bbox'].str.strip('[')\n","train_labels['bbox'] = train_labels['bbox'].str.strip(']')\n","train_labels[['x','y','w','h']] = train_labels['bbox'].str.split(',', expand=True).astype(float).astype(int)"]},{"cell_type":"code","source":["file_names = train_labels['file_name'].value_counts()\n","single_label = train_labels[train_labels['file_name'].isin(file_names[file_names == 1].index)]"],"metadata":{"id":"v5OaReeftq2X"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nKzXWc9Urwtw"},"outputs":[],"source":["from keras.applications.vgg19 import VGG19\n","from keras.applications.vgg19 import preprocess_input\n","from keras import Sequential\n","from keras.layers import Flatten, Dense\n","from keras.preprocessing.image import ImageDataGenerator"]},{"cell_type":"markdown","metadata":{"id":"xfSSpR-U38mX"},"source":["**Create masked and unmasked folders**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xuWzQii5ONQ8"},"outputs":[],"source":["masked = single_label.loc[single_label['masked']=='masked',:]\n","unmasked = single_label.loc[single_label['masked']!='masked']\n","# unmasked = unmasked.iloc[:500]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1705316840316,"user":{"displayName":"Hoàng Nguyễn Việt","userId":"02974498370644461749"},"user_tz":-420},"id":"rSyVbh15vprS","outputId":"9a5cebdb-fe18-4193-b517-2dc7c7877f23"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-0e27cc0a-0218-48f9-9a64-7fc10e01d92c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>file_name</th>\n","      <th>height</th>\n","      <th>width</th>\n","      <th>bbox</th>\n","      <th>age</th>\n","      <th>race</th>\n","      <th>masked</th>\n","      <th>skintone</th>\n","      <th>emotion</th>\n","      <th>gender</th>\n","      <th>x</th>\n","      <th>y</th>\n","      <th>w</th>\n","      <th>h</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>100013282.jpg</td>\n","      <td>1333</td>\n","      <td>2000</td>\n","      <td>934.0000000000097, 144.82228672769534, 238.245...</td>\n","      <td>20-30s</td>\n","      <td>Caucasian</td>\n","      <td>unmasked</td>\n","      <td>mid-light</td>\n","      <td>Neutral</td>\n","      <td>Male</td>\n","      <td>934</td>\n","      <td>144</td>\n","      <td>238</td>\n","      <td>330</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>100016175.jpg</td>\n","      <td>1333</td>\n","      <td>2000</td>\n","      <td>1094.0513571635438, 422.91772295627203, 55.453...</td>\n","      <td>20-30s</td>\n","      <td>Caucasian</td>\n","      <td>unmasked</td>\n","      <td>light</td>\n","      <td>Neutral</td>\n","      <td>Male</td>\n","      <td>1094</td>\n","      <td>422</td>\n","      <td>55</td>\n","      <td>71</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10004189.jpg</td>\n","      <td>2000</td>\n","      <td>1333</td>\n","      <td>419.93871061403877, 269.1250391680045, 377.190...</td>\n","      <td>20-30s</td>\n","      <td>Mongoloid</td>\n","      <td>unmasked</td>\n","      <td>light</td>\n","      <td>Happiness</td>\n","      <td>Female</td>\n","      <td>419</td>\n","      <td>269</td>\n","      <td>377</td>\n","      <td>491</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>100104600.jpg</td>\n","      <td>2000</td>\n","      <td>1333</td>\n","      <td>549.169724453414, 92.52040334013152, 306.88213...</td>\n","      <td>20-30s</td>\n","      <td>Caucasian</td>\n","      <td>unmasked</td>\n","      <td>mid-light</td>\n","      <td>Happiness</td>\n","      <td>Female</td>\n","      <td>549</td>\n","      <td>92</td>\n","      <td>306</td>\n","      <td>437</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>10012376.jpg</td>\n","      <td>2000</td>\n","      <td>1333</td>\n","      <td>640.2165901410499, 619.7806050101991, 359.9910...</td>\n","      <td>20-30s</td>\n","      <td>Mongoloid</td>\n","      <td>unmasked</td>\n","      <td>light</td>\n","      <td>Happiness</td>\n","      <td>Female</td>\n","      <td>640</td>\n","      <td>619</td>\n","      <td>359</td>\n","      <td>440</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>12240</th>\n","      <td>image_2713.jpg</td>\n","      <td>1024</td>\n","      <td>1024</td>\n","      <td>244.71717171717162, 176.66666666666654, 587.24...</td>\n","      <td>40-50s</td>\n","      <td>Caucasian</td>\n","      <td>unmasked</td>\n","      <td>mid-light</td>\n","      <td>Happiness</td>\n","      <td>Male</td>\n","      <td>244</td>\n","      <td>176</td>\n","      <td>587</td>\n","      <td>828</td>\n","    </tr>\n","    <tr>\n","      <th>12241</th>\n","      <td>image_3332.jpg</td>\n","      <td>1024</td>\n","      <td>1024</td>\n","      <td>265.6338028169031, 174.2441314553992, 584.7276...</td>\n","      <td>Senior</td>\n","      <td>Caucasian</td>\n","      <td>unmasked</td>\n","      <td>light</td>\n","      <td>Happiness</td>\n","      <td>Female</td>\n","      <td>265</td>\n","      <td>174</td>\n","      <td>584</td>\n","      <td>797</td>\n","    </tr>\n","    <tr>\n","      <th>12242</th>\n","      <td>image_6905.jpg</td>\n","      <td>1024</td>\n","      <td>1024</td>\n","      <td>251.3434343434343, 184.7171717171712, 500.5353...</td>\n","      <td>20-30s</td>\n","      <td>Caucasian</td>\n","      <td>unmasked</td>\n","      <td>light</td>\n","      <td>Neutral</td>\n","      <td>Male</td>\n","      <td>251</td>\n","      <td>184</td>\n","      <td>500</td>\n","      <td>798</td>\n","    </tr>\n","    <tr>\n","      <th>12243</th>\n","      <td>image_4080.jpg</td>\n","      <td>1024</td>\n","      <td>1024</td>\n","      <td>222.72727272727235, 179.8181818181809, 586.909...</td>\n","      <td>Kid</td>\n","      <td>Caucasian</td>\n","      <td>unmasked</td>\n","      <td>light</td>\n","      <td>Happiness</td>\n","      <td>Female</td>\n","      <td>222</td>\n","      <td>179</td>\n","      <td>586</td>\n","      <td>714</td>\n","    </tr>\n","    <tr>\n","      <th>12244</th>\n","      <td>image_8309.jpg</td>\n","      <td>1024</td>\n","      <td>1024</td>\n","      <td>169.37373737373707, 141.48484848484836, 566.28...</td>\n","      <td>Baby</td>\n","      <td>Caucasian</td>\n","      <td>unmasked</td>\n","      <td>light</td>\n","      <td>Neutral</td>\n","      <td>Female</td>\n","      <td>169</td>\n","      <td>141</td>\n","      <td>566</td>\n","      <td>751</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>11498 rows × 14 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0e27cc0a-0218-48f9-9a64-7fc10e01d92c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0e27cc0a-0218-48f9-9a64-7fc10e01d92c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0e27cc0a-0218-48f9-9a64-7fc10e01d92c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-db6206b2-416a-460e-94cb-0c939386fe4c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-db6206b2-416a-460e-94cb-0c939386fe4c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-db6206b2-416a-460e-94cb-0c939386fe4c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_98560c96-c75f-4795-a407-ae849fe2c51d\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('unmasked')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_98560c96-c75f-4795-a407-ae849fe2c51d button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('unmasked');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["            file_name  height  width  \\\n","0       100013282.jpg    1333   2000   \n","1       100016175.jpg    1333   2000   \n","2        10004189.jpg    2000   1333   \n","3       100104600.jpg    2000   1333   \n","4        10012376.jpg    2000   1333   \n","...               ...     ...    ...   \n","12240  image_2713.jpg    1024   1024   \n","12241  image_3332.jpg    1024   1024   \n","12242  image_6905.jpg    1024   1024   \n","12243  image_4080.jpg    1024   1024   \n","12244  image_8309.jpg    1024   1024   \n","\n","                                                    bbox     age       race  \\\n","0      934.0000000000097, 144.82228672769534, 238.245...  20-30s  Caucasian   \n","1      1094.0513571635438, 422.91772295627203, 55.453...  20-30s  Caucasian   \n","2      419.93871061403877, 269.1250391680045, 377.190...  20-30s  Mongoloid   \n","3      549.169724453414, 92.52040334013152, 306.88213...  20-30s  Caucasian   \n","4      640.2165901410499, 619.7806050101991, 359.9910...  20-30s  Mongoloid   \n","...                                                  ...     ...        ...   \n","12240  244.71717171717162, 176.66666666666654, 587.24...  40-50s  Caucasian   \n","12241  265.6338028169031, 174.2441314553992, 584.7276...  Senior  Caucasian   \n","12242  251.3434343434343, 184.7171717171712, 500.5353...  20-30s  Caucasian   \n","12243  222.72727272727235, 179.8181818181809, 586.909...     Kid  Caucasian   \n","12244  169.37373737373707, 141.48484848484836, 566.28...    Baby  Caucasian   \n","\n","         masked   skintone    emotion  gender     x    y    w    h  \n","0      unmasked  mid-light    Neutral    Male   934  144  238  330  \n","1      unmasked      light    Neutral    Male  1094  422   55   71  \n","2      unmasked      light  Happiness  Female   419  269  377  491  \n","3      unmasked  mid-light  Happiness  Female   549   92  306  437  \n","4      unmasked      light  Happiness  Female   640  619  359  440  \n","...         ...        ...        ...     ...   ...  ...  ...  ...  \n","12240  unmasked  mid-light  Happiness    Male   244  176  587  828  \n","12241  unmasked      light  Happiness  Female   265  174  584  797  \n","12242  unmasked      light    Neutral    Male   251  184  500  798  \n","12243  unmasked      light  Happiness  Female   222  179  586  714  \n","12244  unmasked      light    Neutral  Female   169  141  566  751  \n","\n","[11498 rows x 14 columns]"]},"execution_count":27,"metadata":{},"output_type":"execute_result"}],"source":["unmasked"]},{"cell_type":"markdown","metadata":{"id":"RROvPfglB6Vj"},"source":[]},{"cell_type":"code","source":[],"metadata":{"id":"aUF0IJSOfXf-"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":390},"executionInfo":{"elapsed":80481,"status":"error","timestamp":1705237721793,"user":{"displayName":"Thịnh Vũ Đức","userId":"10883447843124679803"},"user_tz":-420},"id":"-natzatXRkY0","outputId":"e8bfa46f-15d5-4bb3-a686-e994c51567ab"},"outputs":[{"ename":"KeyboardInterrupt","evalue":"","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-83d3c83860f1>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mshutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/train_crop_align/{single_label['file_name'][i]}\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34mf\"/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/mask_data/ external_data/masked/{single_label['file_name'][i]}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m     \u001b[0mshutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/train_crop_align/{single_label['file_name'][i]}\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34mf\"/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/mask_data/ external_data/unmasked/{single_label['file_name'][i]}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/lib/python3.10/shutil.py\u001b[0m in \u001b[0;36mcopy\u001b[0;34m(src, dst, follow_symlinks)\u001b[0m\n\u001b[1;32m    415\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdst\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    416\u001b[0m         \u001b[0mdst\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdst\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbasename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 417\u001b[0;31m     \u001b[0mcopyfile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdst\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfollow_symlinks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfollow_symlinks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    418\u001b[0m     \u001b[0mcopymode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdst\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfollow_symlinks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfollow_symlinks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    419\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mdst\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/shutil.py\u001b[0m in \u001b[0;36mcopyfile\u001b[0;34m(src, dst, follow_symlinks)\u001b[0m\n\u001b[1;32m    231\u001b[0m     \u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maudit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"shutil.copyfile\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdst\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    232\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 233\u001b[0;31m     \u001b[0;32mif\u001b[0m \u001b[0m_samefile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdst\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    234\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mSameFileError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"{!r} and {!r} are the same file\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdst\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    235\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/shutil.py\u001b[0m in \u001b[0;36m_samefile\u001b[0;34m(src, dst)\u001b[0m\n\u001b[1;32m    208\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'samefile'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    209\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 210\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msamefile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdst\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    211\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    212\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/genericpath.py\u001b[0m in \u001b[0;36msamefile\u001b[0;34m(f1, f2)\u001b[0m\n\u001b[1;32m     98\u001b[0m     \u001b[0mraises\u001b[0m \u001b[0man\u001b[0m \u001b[0mexception\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0man\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0mcall\u001b[0m \u001b[0mon\u001b[0m \u001b[0meither\u001b[0m \u001b[0mpathname\u001b[0m \u001b[0mfails\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     99\u001b[0m     \"\"\"\n\u001b[0;32m--> 100\u001b[0;31m     \u001b[0ms1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    101\u001b[0m     \u001b[0ms2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    102\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0msamestat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["for i in range(len(single_label)-1):\n","  if single_label['masked'][i] == 'masked':\n","    shutil.copy(f\"/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/train_crop_align/{single_label['file_name'][i]}\", f\"/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/mask_data/ external_data/masked/{single_label['file_name'][i]}\")\n","  else:\n","    shutil.copy(f\"/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/train_crop_align/{single_label['file_name'][i]}\", f\"/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/mask_data/ external_data/unmasked/{single_label['file_name'][i]}\")"]},{"cell_type":"markdown","metadata":{"id":"Z9t66KwWB3N7"},"source":["**DUPLICATE MASKED IMAGE**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":193},"executionInfo":{"elapsed":298,"status":"error","timestamp":1705027118955,"user":{"displayName":"Thịnh Vũ Đức","userId":"10883447843124679803"},"user_tz":-420},"id":"Ne4hvGkyAQac","outputId":"92d1ac18-237e-41d2-b82d-ba240bbac7e3"},"outputs":[{"ename":"NameError","evalue":"name 'all_dir' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-5a3601ebf586>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mall_dir\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'.jpg'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'all_dir' is not defined"]}],"source":["all_dir = glob('/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/mask_data/masked/*.jpg')\n","\n","name = [x.split('/')[-1] for x in all_dir]\n","name = [x.split('.jpg')[0] for x in name]\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":177407,"status":"ok","timestamp":1704872848626,"user":{"displayName":"Hoàng Nguyễn Việt","userId":"02974498370644461749"},"user_tz":-420},"id":"a8WdrIFX_-xx","outputId":"5ee1203b-8798-4dac-c859-6706ca850177"},"outputs":[{"name":"stderr","output_type":"stream","text":["\n","100%|██████████| 366/366 [00:07<00:00, 48.22it/s]\u001b[A\n","100%|██████████| 25/25 [02:57<00:00,  7.16s/it]"]},{"name":"stdout","output_type":"stream","text":["Vòng lặp số 25, lần lặp thứ 366\n"]},{"name":"stderr","output_type":"stream","text":["\r100%|██████████| 25/25 [02:57<00:00,  7.09s/it]"]},{"name":"stdout","output_type":"stream","text":["\n","Finish!!!\n"]},{"name":"stderr","output_type":"stream","text":["\n"]}],"source":["from tqdm import tqdm\n","from IPython.display import clear_output\n","import time\n","\n","for i in tqdm(range(1,26)):\n","  for j in tqdm(range(1,len(all_dir)),leave=False):\n","        name = [x.split('/')[-1] for x in all_dir]\n","        shutil.copy(all_dir[j], f\"/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/mask_data/masked/{name[j]}({i}).jpg\")\n","        clear_output()\n","        print(f\"Vòng lặp số {i}, lần lặp thứ {j}\")\n","print(\"\\nFinish!!!\")"]},{"cell_type":"markdown","metadata":{"id":"txaZzOHckMB-"},"source":["**USE EXTERNAL DATA**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6YbiVqGokQrn"},"outputs":[],"source":["masked = single_label.loc[single_label['masked']=='masked',:]\n","unmasked = single_label.loc[single_label['masked']!='masked']\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1705229667618,"user":{"displayName":"Nguyễn Văn Thùy","userId":"13343204588086918249"},"user_tz":-420},"id":"JOqRwsRskQu1","outputId":"126971d6-5c2c-4482-ca3b-c5d0cc894aeb"},"outputs":[{"data":{"text/plain":["11498"]},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":["len(unmasked)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":567,"status":"ok","timestamp":1705239687711,"user":{"displayName":"Thịnh Vũ Đức","userId":"10883447843124679803"},"user_tz":-420},"id":"NPT9MfhD307X","outputId":"1af4ae95-f9a8-44a4-97e0-6ddab6e1f60f"},"outputs":[{"data":{"text/plain":["5000"]},"execution_count":20,"metadata":{},"output_type":"execute_result"}],"source":["all_dir = glob('/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/mask_data/ external_data/png_mask/*')\n","len(all_dir)"]},{"cell_type":"markdown","metadata":{"id":"0TbJ9i6sK_qD"},"source":["**PNG to JPG**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GcfdCJEm305S"},"outputs":[],"source":["from PIL import Image\n","\n","png_file_path = glob('/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/mask_data/ external_data/png_mask/*.png')\n","\n","\n","for dir in png_file_path:\n","  with Image.open(dir) as img:\n","      # Lưu lại dưới định dạng .jpg\n","      file_name = os.path.basename(dir)\n","      base_name, file_extension = os.path.splitext(file_name)\n","      desired_string = base_name\n","      img.convert(\"RGB\").save(f'/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/mask_data/ external_data/masked/{desired_string}.jpg', \"JPEG\")\n","\n","# os.remove(png_file_path)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":549,"status":"ok","timestamp":1705239920573,"user":{"displayName":"Thịnh Vũ Đức","userId":"10883447843124679803"},"user_tz":-420},"id":"_WaqI_Aw300I","outputId":"f826ced1-3f67-4c1a-c710-1e118f2ac29c"},"outputs":[{"data":{"text/plain":["5000"]},"execution_count":23,"metadata":{},"output_type":"execute_result"}],"source":["all_dir = glob('/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/mask_data/ external_data/masked/*')\n","len(all_dir)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A6g10I_v30xI"},"outputs":[],"source":["source_file_path = '/path/to/your/source_folder/your_image.png'\n","destination_folder = '/path/to/your/destination_folder/'\n","shutil.copy(source_file_path, destination_folder)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_nf4DVf230qN"},"outputs":[],"source":["/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/train_crop_align/{single_label['file_name'][i]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UAQ7hokvZ-lw"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":245},"executionInfo":{"elapsed":587,"status":"error","timestamp":1705315686719,"user":{"displayName":"Hoàng Nguyễn Việt","userId":"02974498370644461749"},"user_tz":-420},"id":"1mXcJR9i30Xh","outputId":"de57d357-a563-48dc-8f8a-7be26fbd7886"},"outputs":[{"ename":"NameError","evalue":"name 'single_label' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-07539cf65966>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msingle_label\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0msingle_label\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmasked\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'masked'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0msource_file_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf'/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/train_crop_align/{single_label.file_name[i]}'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mdestination_folder\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf'/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/mask_data/ external_data/masked/{single_label.file_name[i]}'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mshutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msource_file_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdestination_folder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'single_label' is not defined"]}],"source":["for i in range(len(single_label)):\n","  if single_label.masked[i] == 'masked':\n","    source_file_path = f'/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/train_crop_align/{single_label.file_name[i]}'\n","    destination_folder = f'/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/mask_data/ external_data/masked/{single_label.file_name[i]}'\n","    shutil.copy(source_file_path, destination_folder)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1705240620023,"user":{"displayName":"Thịnh Vũ Đức","userId":"10883447843124679803"},"user_tz":-420},"id":"KoXqvgqS1lK6","outputId":"5e0b24e2-6c60-4977-e040-5a0419be7f06"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'100013282.jpg'"]},"execution_count":35,"metadata":{},"output_type":"execute_result"}],"source":["single_label.file_name[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CyLs6F2x1lTE"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VorKcfL61lVp"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"U9lm0vlMDMaB"},"source":["**Train model**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d5FFXQoXONc0"},"outputs":[],"source":["train_dir = '/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/mask_data/ external_data/train/'\n","test_dir = '/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/test/*.jgp'"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":41406,"status":"ok","timestamp":1705384656708,"user":{"displayName":"Thịnh Vũ Đức","userId":"10883447843124679803"},"user_tz":-420},"id":"sSZWxSE2ONdn","outputId":"91bc7a4a-448e-44ac-8aee-4588b316b647"},"outputs":[{"name":"stdout","output_type":"stream","text":["Found 10964 images belonging to 2 classes.\n"]}],"source":["train_datagen = ImageDataGenerator(rescale=1.0/255, horizontal_flip=True, zoom_range=0.2,shear_range=0.2)\n","train_generator = train_datagen.flow_from_directory(directory=train_dir,target_size=(128,128),class_mode='categorical',batch_size=32)\n","\n","# test_datagen = ImageDataGenerator(rescale=1.0/255)\n","# test_generator = train_datagen.flow_from_directory(directory=train_dir,target_size=(128,128),class_mode='categorical',batch_size=32)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":553,"status":"ok","timestamp":1705384657257,"user":{"displayName":"Thịnh Vũ Đức","userId":"10883447843124679803"},"user_tz":-420},"id":"eUwFCOcyONer","outputId":"03c408af-4b93-43ff-fe8d-7f4425cd9cf3"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," vgg19 (Functional)          (None, 4, 4, 512)         20024384  \n","                                                                 \n"," flatten_1 (Flatten)         (None, 8192)              0         \n","                                                                 \n"," dense_1 (Dense)             (None, 2)                 16386     \n","                                                                 \n","=================================================================\n","Total params: 20040770 (76.45 MB)\n","Trainable params: 16386 (64.01 KB)\n","Non-trainable params: 20024384 (76.39 MB)\n","_________________________________________________________________\n"]}],"source":["vgg19 = VGG19(weights='imagenet',include_top=False,input_shape=(128,128,3))\n","\n","for layer in vgg19.layers:\n","    layer.trainable = False\n","\n","model = Sequential()\n","model.add(vgg19)\n","model.add(Flatten())\n","model.add(Dense(2,activation='sigmoid'))\n","model.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J69fNdyfONfx"},"outputs":[],"source":["model.compile(optimizer=\"adam\",loss=\"categorical_crossentropy\",metrics =\"accuracy\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":206707,"status":"ok","timestamp":1705384872701,"user":{"displayName":"Thịnh Vũ Đức","userId":"10883447843124679803"},"user_tz":-420},"id":"Aqqp6Cf2jkkg","outputId":"5816b9f2-5940-4f1b-f571-291af7721ffb"},"outputs":[{"name":"stdout","output_type":"stream","text":["10/10 [==============================] - 189s 19s/step - loss: 0.5104 - accuracy: 0.7281\n"]}],"source":["history = model.fit_generator(generator=train_generator,\n","                              steps_per_epoch=len(train_generator)//32\n","                              )"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xQssKHlRjkiG"},"outputs":[],"source":["model.evaluate_generator(test_generator)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1705372675052,"user":{"displayName":"Nguyễn Văn Thùy","userId":"13343204588086918249"},"user_tz":-420},"id":"FknVeIF8jkYv","outputId":"919c8118-1abb-4a04-8ceb-86a9dc94a369"},"outputs":[{"data":{"text/plain":["343"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["len(train_generator)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ICwQFP-7jkQs"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xDPcVK3g042j"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"2LlL9bcoGosy"},"source":["**Test**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ab6H1NKruRqZ"},"outputs":[],"source":["mask_label = {0:'masked',1:'unmasked'}"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":469},"executionInfo":{"elapsed":3518,"status":"ok","timestamp":1705384876203,"user":{"displayName":"Thịnh Vũ Đức","userId":"10883447843124679803"},"user_tz":-420},"id":"fWwrgqW1ONlL","outputId":"9ab8628b-95c2-41b2-d26e-1c07a1541968"},"outputs":[{"name":"stdout","output_type":"stream","text":["1/1 [==============================] - 2s 2s/step\n"]},{"data":{"text/plain":["(array([[0.74034107, 0.9119194 ]], dtype=float32), 'unmasked')"]},"execution_count":21,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["all_dir = glob('/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_raw/public_test_crop/*.jpg')\n","dir = np.random.choice(all_dir)\n","\n","sample_mask_img = cv2.imread(dir)\n","sample_mask_img = cv2.resize(sample_mask_img,(128,128))\n","plt.imshow(sample_mask_img[:,:,::-1])\n","sample_mask_img = np.reshape(sample_mask_img,[1,128,128,3])\n","sample_mask_img = sample_mask_img/255.0\n","\n","\n","mask_result = model.predict(sample_mask_img)\n","mask_result,mask_label[mask_result.argmax()]\n"]},{"cell_type":"markdown","metadata":{"id":"ubdPFjDnM8Bx"},"source":["**Save the model**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U_PqbEdNONmV"},"outputs":[],"source":["model.save('masknet.h5')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ekKsfPWlM_TD"},"outputs":[],"source":["mask_label = {0:'MASK',1:'NO MASK'}"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":390},"executionInfo":{"elapsed":24367,"status":"error","timestamp":1705372805561,"user":{"displayName":"Nguyễn Văn Thùy","userId":"13343204588086918249"},"user_tz":-420},"id":"E6bRo3h-vfmV","outputId":"8936b842-e32e-48a9-8934-18af1f07f062"},"outputs":[{"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: '/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_raw/public_test/*.jpg'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-eedef3af2c14>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Read the test data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mtest_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_raw/public_test/*.jpg'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# Extract the image names\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    209\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m                     \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnew_arg_name\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_arg_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 211\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    212\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    329\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfind_stack_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m                 )\n\u001b[0;32m--> 331\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    332\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m         \u001b[0;31m# error: \"Callable[[VarArg(Any), KwArg(Any)], Any]\" has no\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    948\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    949\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 950\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    951\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    952\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    603\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    604\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 605\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1440\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1441\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1442\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1443\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1444\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1733\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1734\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1735\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1736\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1737\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    854\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    855\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 856\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    857\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    858\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_raw/public_test/*.jpg'"]}],"source":["# prompt: tạo 1 data frame để lưu dự đoán phân loại mask hay unmasked từ model trên\\\n","\n","import pandas as pd\n","\n","# Read the test data\n","test_data = pd.read_csv('/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_raw/public_test/*.jpg')\n","\n","# Extract the image names\n","image_names = test_data['image_name']\n","\n","# Create a dataframe to store the predictions\n","predictions = pd.DataFrame(columns=['image_name', 'mask'])\n","\n","# Make predictions for each image\n","for image_name in tqdm(image_names):\n","  # Load the image\n","  image = cv2.imread('/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_raw/public_test_crop/' + image_name)\n","  # Resize the image\n","  image = cv2.resize(image, (128, 128))\n","  # Convert the image to RGB\n","  image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n","  # Normalize the image\n","  image = image / 255.0\n","  # Make a prediction\n","  prediction = model.predict(image.reshape(1, 128, 128, 3))\n","  # Get the predicted mask\n","  predicted_mask = mask_label[prediction.argmax()]\n","  # Add the prediction to the dataframe\n","  predictions = predictions.append({'image_name': image_name, 'mask': predicted_mask}, ignore_index=True)\n","\n","\n","predictions"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"elapsed":656,"status":"ok","timestamp":1705329018125,"user":{"displayName":"Hoàng Nguyễn Việt","userId":"02974498370644461749"},"user_tz":-420},"id":"7KLF1x7yvfo2","outputId":"3385e799-0230-468c-ddfb-f4c889a14b35"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-2405491d-be77-4408-9ea0-bd119d285efe\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>file_name</th>\n","      <th>dir</th>\n","      <th>bbox</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>100147591.jpg</td>\n","      <td>/content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...</td>\n","      <td>[1145.8953, 445.04242, 247.51428, 319.0055]</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>100429351.jpg</td>\n","      <td>/content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...</td>\n","      <td>[603.54114, 310.3182, 302.49335, 333.71506]</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>100473997.jpg</td>\n","      <td>/content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...</td>\n","      <td>[674.82245, 261.32123, 333.20093, 513.1919]</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>100868012.jpg</td>\n","      <td>/content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...</td>\n","      <td>[1004.42096, 234.39935, 117.058655, 187.5834]</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>101013830.jpg</td>\n","      <td>/content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...</td>\n","      <td>[847.01154, 481.0252, 289.93146, 364.18475]</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2208</th>\n","      <td>image_9841.jpg</td>\n","      <td>/content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...</td>\n","      <td>[278, 213, 575, 726]</td>\n","    </tr>\n","    <tr>\n","      <th>2209</th>\n","      <td>image_9913.jpg</td>\n","      <td>/content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...</td>\n","      <td>[252, 203, 543, 723]</td>\n","    </tr>\n","    <tr>\n","      <th>2210</th>\n","      <td>image_9915.jpg</td>\n","      <td>/content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...</td>\n","      <td>[194, 159, 597, 782]</td>\n","    </tr>\n","    <tr>\n","      <th>2211</th>\n","      <td>image_9935.jpg</td>\n","      <td>/content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...</td>\n","      <td>[268, 203, 570, 737]</td>\n","    </tr>\n","    <tr>\n","      <th>2212</th>\n","      <td>image_9975.jpg</td>\n","      <td>/content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...</td>\n","      <td>[227, 214, 550, 708]</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2213 rows × 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2405491d-be77-4408-9ea0-bd119d285efe')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2405491d-be77-4408-9ea0-bd119d285efe button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2405491d-be77-4408-9ea0-bd119d285efe');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f8bed62c-b1a7-4c7a-b5fc-6824b0fee4fb\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f8bed62c-b1a7-4c7a-b5fc-6824b0fee4fb')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f8bed62c-b1a7-4c7a-b5fc-6824b0fee4fb button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_afb0f954-85c6-4782-8c5c-ebf55a465bfa\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('answer_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_afb0f954-85c6-4782-8c5c-ebf55a465bfa button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('answer_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["           file_name                                                dir  \\\n","0      100147591.jpg  /content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...   \n","1      100429351.jpg  /content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...   \n","2      100473997.jpg  /content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...   \n","3      100868012.jpg  /content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...   \n","4      101013830.jpg  /content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...   \n","...              ...                                                ...   \n","2208  image_9841.jpg  /content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...   \n","2209  image_9913.jpg  /content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...   \n","2210  image_9915.jpg  /content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...   \n","2211  image_9935.jpg  /content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...   \n","2212  image_9975.jpg  /content/drive/MyDrive/AI_HACKATHON_NEWBEES/da...   \n","\n","                                               bbox  \n","0       [1145.8953, 445.04242, 247.51428, 319.0055]  \n","1       [603.54114, 310.3182, 302.49335, 333.71506]  \n","2       [674.82245, 261.32123, 333.20093, 513.1919]  \n","3     [1004.42096, 234.39935, 117.058655, 187.5834]  \n","4       [847.01154, 481.0252, 289.93146, 364.18475]  \n","...                                             ...  \n","2208                           [278, 213, 575, 726]  \n","2209                           [252, 203, 543, 723]  \n","2210                           [194, 159, 597, 782]  \n","2211                           [268, 203, 570, 737]  \n","2212                           [227, 214, 550, 708]  \n","\n","[2213 rows x 3 columns]"]},"execution_count":35,"metadata":{},"output_type":"execute_result"}],"source":["answer_dir = '/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_raw/public_test_predict.csv'\n","answer_df = pd.read_csv(answer_dir)\n","\n","# answer_df['image_id'] = answer_df['file_name'].map(mapping_dict)\n","answer_df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"elapsed":720,"status":"ok","timestamp":1705372734468,"user":{"displayName":"Nguyễn Văn Thùy","userId":"13343204588086918249"},"user_tz":-420},"id":"53sSRrVjiYtP","outputId":"1989c8cc-a919-46a2-a6d3-d555cde6fcc1"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-d496614f-5a59-4a01-a9df-400817cfdbd9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>file_name</th>\n","      <th>bbox</th>\n","      <th>image_id</th>\n","      <th>race</th>\n","      <th>age</th>\n","      <th>emotion</th>\n","      <th>gender</th>\n","      <th>skintone</th>\n","      <th>masked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>100147591.jpg</td>\n","      <td>[1145.8953, 445.04242, 247.51428, 319.0055]</td>\n","      <td>1</td>\n","      <td>Mongoloid</td>\n","      <td>20-30s</td>\n","      <td>Happiness</td>\n","      <td>Male</td>\n","      <td>light</td>\n","      <td>unmasked</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>100429351.jpg</td>\n","      <td>[603.54114, 310.3182, 302.49335, 333.71506]</td>\n","      <td>2</td>\n","      <td>Mongoloid</td>\n","      <td>20-30s</td>\n","      <td>Happiness</td>\n","      <td>Female</td>\n","      <td>light</td>\n","      <td>unmasked</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>100473997.jpg</td>\n","      <td>[674.82245, 261.32123, 333.20093, 513.1919]</td>\n","      <td>3</td>\n","      <td>Caucasian</td>\n","      <td>Senior</td>\n","      <td>Happiness</td>\n","      <td>Male</td>\n","      <td>light</td>\n","      <td>unmasked</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>100868012.jpg</td>\n","      <td>[1004.42096, 234.39935, 117.058655, 187.5834]</td>\n","      <td>4</td>\n","      <td>Mongoloid</td>\n","      <td>20-30s</td>\n","      <td>Happiness</td>\n","      <td>Female</td>\n","      <td>light</td>\n","      <td>unmasked</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>101013830.jpg</td>\n","      <td>[847.01154, 481.0252, 289.93146, 364.18475]</td>\n","      <td>5</td>\n","      <td>Caucasian</td>\n","      <td>Senior</td>\n","      <td>Happiness</td>\n","      <td>Male</td>\n","      <td>light</td>\n","      <td>unmasked</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2208</th>\n","      <td>image_9841.jpg</td>\n","      <td>[278, 213, 575, 726]</td>\n","      <td>2180</td>\n","      <td>Caucasian</td>\n","      <td>Kid</td>\n","      <td>Happiness</td>\n","      <td>Male</td>\n","      <td>light</td>\n","      <td>unmasked</td>\n","    </tr>\n","    <tr>\n","      <th>2209</th>\n","      <td>image_9913.jpg</td>\n","      <td>[252, 203, 543, 723]</td>\n","      <td>2181</td>\n","      <td>Caucasian</td>\n","      <td>Teenager</td>\n","      <td>Happiness</td>\n","      <td>Female</td>\n","      <td>light</td>\n","      <td>unmasked</td>\n","    </tr>\n","    <tr>\n","      <th>2210</th>\n","      <td>image_9915.jpg</td>\n","      <td>[194, 159, 597, 782]</td>\n","      <td>2182</td>\n","      <td>Caucasian</td>\n","      <td>Teenager</td>\n","      <td>Happiness</td>\n","      <td>Male</td>\n","      <td>light</td>\n","      <td>unmasked</td>\n","    </tr>\n","    <tr>\n","      <th>2211</th>\n","      <td>image_9935.jpg</td>\n","      <td>[268, 203, 570, 737]</td>\n","      <td>2183</td>\n","      <td>Caucasian</td>\n","      <td>Teenager</td>\n","      <td>Happiness</td>\n","      <td>Female</td>\n","      <td>light</td>\n","      <td>unmasked</td>\n","    </tr>\n","    <tr>\n","      <th>2212</th>\n","      <td>image_9975.jpg</td>\n","      <td>[227, 214, 550, 708]</td>\n","      <td>2184</td>\n","      <td>Mongoloid</td>\n","      <td>Teenager</td>\n","      <td>Happiness</td>\n","      <td>Female</td>\n","      <td>light</td>\n","      <td>unmasked</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2213 rows × 9 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d496614f-5a59-4a01-a9df-400817cfdbd9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d496614f-5a59-4a01-a9df-400817cfdbd9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d496614f-5a59-4a01-a9df-400817cfdbd9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-afd80d78-b70a-42e6-9fbb-3140414c7025\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-afd80d78-b70a-42e6-9fbb-3140414c7025')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-afd80d78-b70a-42e6-9fbb-3140414c7025 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_09c0073f-b886-4988-84d9-6e3eeed8d57a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('submit_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_09c0073f-b886-4988-84d9-6e3eeed8d57a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('submit_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["           file_name                                           bbox  image_id  \\\n","0      100147591.jpg    [1145.8953, 445.04242, 247.51428, 319.0055]         1   \n","1      100429351.jpg    [603.54114, 310.3182, 302.49335, 333.71506]         2   \n","2      100473997.jpg    [674.82245, 261.32123, 333.20093, 513.1919]         3   \n","3      100868012.jpg  [1004.42096, 234.39935, 117.058655, 187.5834]         4   \n","4      101013830.jpg    [847.01154, 481.0252, 289.93146, 364.18475]         5   \n","...              ...                                            ...       ...   \n","2208  image_9841.jpg                           [278, 213, 575, 726]      2180   \n","2209  image_9913.jpg                           [252, 203, 543, 723]      2181   \n","2210  image_9915.jpg                           [194, 159, 597, 782]      2182   \n","2211  image_9935.jpg                           [268, 203, 570, 737]      2183   \n","2212  image_9975.jpg                           [227, 214, 550, 708]      2184   \n","\n","           race       age    emotion  gender skintone    masked  \n","0     Mongoloid    20-30s  Happiness    Male    light  unmasked  \n","1     Mongoloid    20-30s  Happiness  Female    light  unmasked  \n","2     Caucasian    Senior  Happiness    Male    light  unmasked  \n","3     Mongoloid    20-30s  Happiness  Female    light  unmasked  \n","4     Caucasian    Senior  Happiness    Male    light  unmasked  \n","...         ...       ...        ...     ...      ...       ...  \n","2208  Caucasian       Kid  Happiness    Male    light  unmasked  \n","2209  Caucasian  Teenager  Happiness  Female    light  unmasked  \n","2210  Caucasian  Teenager  Happiness    Male    light  unmasked  \n","2211  Caucasian  Teenager  Happiness  Female    light  unmasked  \n","2212  Mongoloid  Teenager  Happiness  Female    light  unmasked  \n","\n","[2213 rows x 9 columns]"]},"execution_count":14,"metadata":{},"output_type":"execute_result"}],"source":["submit_dir = '/content/drive/MyDrive/AI_HACKATHON_NEWBEES/submit/answer.csv'\n","submit_df = pd.read_csv(submit_dir)\n","submit_df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1705372761279,"user":{"displayName":"Nguyễn Văn Thùy","userId":"13343204588086918249"},"user_tz":-420},"id":"60wTZHW4ii4i","outputId":"da12dc1d-0538-4022-8c01-727595c04e84"},"outputs":[{"data":{"text/plain":["unmasked    2150\n","masked        63\n","Name: masked, dtype: int64"]},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":["submit_df.masked.value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355},"executionInfo":{"elapsed":245530,"status":"error","timestamp":1705390371150,"user":{"displayName":"Hoàng Nguyễn Việt","userId":"02974498370644461749"},"user_tz":-420},"id":"BBgYWfqSIzag","outputId":"1c8f763e-9ac5-4e58-8614-276645848d1e"},"outputs":[{"ename":"ReadError","evalue":"/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_raw/private_test.zip is not a zip file","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mReadError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-ba862e32a01e>\u001b[0m in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m   \u001b[0mshutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrmtree\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0munzip_dir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmakedirs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0munzip_dir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mshutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munpack_archive\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mzip_file\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0munzip_dir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/lib/python3.10/shutil.py\u001b[0m in \u001b[0;36munpack_archive\u001b[0;34m(filename, extract_dir, format, filter)\u001b[0m\n\u001b[1;32m   1312\u001b[0m         \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_UNPACK_FORMATS\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1313\u001b[0m         \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_UNPACK_FORMATS\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0mfilter_kwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1314\u001b[0;31m         \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextract_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1315\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1316\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/shutil.py\u001b[0m in \u001b[0;36m_unpack_zipfile\u001b[0;34m(filename, extract_dir)\u001b[0m\n\u001b[1;32m   1199\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1200\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mzipfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_zipfile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1201\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mReadError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"%s is not a zip file\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1202\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1203\u001b[0m     \u001b[0mzip\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzipfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mZipFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mReadError\u001b[0m: /content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_raw/private_test.zip is not a zip file"]}],"source":["\n","import os\n","import shutil\n","\n","zip_file = '/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_raw/private_test.zip'\n","unzip_dir = '/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_raw/'\n","\n","if os.path.exists(unzip_dir):\n","  shutil.rmtree(unzip_dir)\n","os.makedirs(unzip_dir)\n","shutil.unpack_archive(zip_file, unzip_dir)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355},"executionInfo":{"elapsed":317,"status":"error","timestamp":1705391697692,"user":{"displayName":"Hoàng Nguyễn Việt","userId":"02974498370644461749"},"user_tz":-420},"id":"dh_VEHMuLC61","outputId":"373b575a-c1f2-46d2-bcda-2a8d153f55c0"},"outputs":[{"ename":"ReadError","evalue":"/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_raw/private_test.zip is not a zip file","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mReadError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-39acdef1c22b>\u001b[0m in \u001b[0;36m<cell line: 9>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m   \u001b[0mshutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrmtree\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0munzip_dir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmakedirs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0munzip_dir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mshutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munpack_archive\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mzip_file\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0munzip_dir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/lib/python3.10/shutil.py\u001b[0m in \u001b[0;36munpack_archive\u001b[0;34m(filename, extract_dir, format, filter)\u001b[0m\n\u001b[1;32m   1312\u001b[0m         \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_UNPACK_FORMATS\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1313\u001b[0m         \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_UNPACK_FORMATS\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0mfilter_kwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1314\u001b[0;31m         \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextract_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1315\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1316\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/shutil.py\u001b[0m in \u001b[0;36m_unpack_zipfile\u001b[0;34m(filename, extract_dir)\u001b[0m\n\u001b[1;32m   1199\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1200\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mzipfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_zipfile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1201\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mReadError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"%s is not a zip file\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1202\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1203\u001b[0m     \u001b[0mzip\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzipfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mZipFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mReadError\u001b[0m: /content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_raw/private_test.zip is not a zip file"]}],"source":["# prompt: unzip file\n","\n","zip_file = '/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_raw/private_test.zip'\n","unzip_dir = '/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_raw/'\n","\n","if os.path.exists(unzip_dir):\n","  shutil.rmtree(unzip_dir)\n","os.makedirs(unzip_dir)\n","shutil.unpack_archive(zip_file, unzip_dir)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1705391677610,"user":{"displayName":"Hoàng Nguyễn Việt","userId":"02974498370644461749"},"user_tz":-420},"id":"w0Oeo-yhMmKD","outputId":"2565aaff-a1ad-46d9-d59d-683a5f31d10f"},"outputs":[{"data":{"text/plain":["76"]},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":["all_dir = glob('/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/emotion_data/train_processed/Fear/*')\n","len(all_dir)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1705392118948,"user":{"displayName":"Hoàng Nguyễn Việt","userId":"02974498370644461749"},"user_tz":-420},"id":"vGg4ucvRQntf","outputId":"e6d9e07f-3c96-4bd6-beea-443d251d6bec"},"outputs":[{"data":{"text/plain":["Happiness    7229\n","Neutral      3729\n","Sadness       296\n","Anger         237\n","Surprise      237\n","Disgust       102\n","Fear           81\n","Name: emotion, dtype: int64"]},"execution_count":29,"metadata":{},"output_type":"execute_result"}],"source":["single_label.emotion.value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"C33sEECqSAxj"},"outputs":[],"source":["data_dir = '/content/drive/MyDrive/AI_HACKATHON_NEWBEES/data_processed/'\n","data_crop_dir = data_dir + 'train_crop_align/'"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":175},"executionInfo":{"elapsed":978,"status":"error","timestamp":1705398385065,"user":{"displayName":"Thịnh Vũ Đức","userId":"10883447843124679803"},"user_tz":-420},"id":"MYhCnd_kTc9U","outputId":"3401b36c-81cd-4a1c-8d66-268b8b2d43e0"},"outputs":[{"ename":"NameError","evalue":"name 'single_label' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-7dc517df45e7>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msingle_label\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'single_label' is not defined"]}],"source":["single_label"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":287,"status":"ok","timestamp":1705393216311,"user":{"displayName":"Hoàng Nguyễn Việt","userId":"02974498370644461749"},"user_tz":-420},"id":"lyz76YHiWKFy","outputId":"cc94f728-a5c3-466b-8769-5a01ae7d86ec"},"outputs":[{"data":{"text/plain":["596"]},"execution_count":16,"metadata":{},"output_type":"execute_result"}],"source":["all_dir = glob(emotion_data_dir+'Happiness/*')\n","len(all_dir)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"elapsed":307,"status":"ok","timestamp":1705393167478,"user":{"displayName":"Hoàng Nguyễn Việt","userId":"02974498370644461749"},"user_tz":-420},"id":"XwvD69hFWOOv","outputId":"ad11ae6b-c039-4125-94c7-141241e1410c"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'100013282.jpg'"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["single_label.iloc[0,0]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ej-g_GQgWpli"},"outputs":[],"source":[]}],"metadata":{"accelerator":"GPU","colab":{"machine_shape":"hm","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}